apply plugin: "cpp"

model {
  toolChains {
    gcc(Gcc) {
      // force windows_x86 to compile for 64 bit instead of 32
      // gradle doesn't seem to recognize 64 bit windows
      target("windows_x86")
      {
        cCompiler.executable "x86_64-w64-mingw32-gcc"
        cppCompiler.executable "x86_64-w64-mingw32-g++"
        linker.executable "x86_64-w64-mingw32-g++"
        assembler.executable "x86_64-w64-mingw32-gcc-as"
        staticLibArchiver.executable "x86_64-w64-mingw32-gcc-ar"
        linker.withArguments { args ->
          args << "-m64"
        }
      }
      /*
      // actual windows_x86 target configuration
      target("windows_x86")
      {
        cCompiler.executable "i686-w64-mingw32-gcc"
        cppCompiler.executable "i686-w64-mingw32-g++"
        linker.executable "i686-w64-mingw32-g++"
        assembler.executable "i686-w64-mingw32-gcc-as"
        staticLibArchiver.executable "i686-w64-mingw32-gcc-ar"
      }
      */
    }
  }

  repositories {
    libs(PrebuiltLibraries) {
      GLEW {
        headers.srcDir "third party/include/GLEW"
        binaries.withType(StaticLibraryBinary) {
          def os = getTargetPlatform().getOperatingSystem()

          if(!os.isCurrent())
            return;
          
          if(os.isWindows())
            staticLibraryFile = file("third party/lib/glew32s.lib")
          else if(os.isLinux())
            staticLibraryFile = file("third party/lib/libGLEW.a")
        }
      }

      GL {
        headers.srcDir "third party/include/GL"
        binaries.withType(SharedLibraryBinary) {
          def os = getTargetPlatform().getOperatingSystem()
          def architecture = getTargetPlatform().getArchitecture()
          
          if(!os.isCurrent())
            return;
          
          if(os.isWindows())
          {
            def parentFolder = architecture.getName() == "x86" ? "C:/Windows/System32/" : "C:/Windows/SysWOW64/"
            sharedLibraryFile = file("${parentFolder}opengl32.dll")
          }
          else if(os.isLinux())
          {
            sharedLibraryFile = file("/usr/lib/libGL.so")
          }
        }
      }

      SDL {
        headers.srcDir "third party/include/SDL2"
        binaries.withType(SharedLibraryBinary) {
          def os = getTargetPlatform().getOperatingSystem()

          if(!os.isCurrent())
            return;
          
          if(os.isWindows())
            sharedLibraryFile = file("third party/lib/SDL2.dll")
          else if(os.isLinux())
            sharedLibraryFile = file("/usr/lib/libSDL2.so")
        }
      }
    }
  }

  components {
    ProvaEngine(NativeLibrarySpec) {
      sources {
        cpp {
          lib project: ':SOIL', library: 'SOIL'
          lib library: 'SDL'
          lib library: 'GLEW'
          lib library: 'GL'
          exportedHeaders.srcDir "include"
          source.srcDir "src"
        }
      }
      
      binaries.all {
        cppCompiler.define "GLEW_STATIC"
        
        if (toolChain in Gcc) {
          cppCompiler.args "-O2"
        }
      }
    }
  }
}